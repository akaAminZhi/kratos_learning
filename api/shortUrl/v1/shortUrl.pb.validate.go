// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/shortUrl/v1/shortUrl.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortUrlRequestMultiError, or nil if none found.
func (m *CreateShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetLongUrl()) < 1 {
		err := CreateShortUrlRequestValidationError{
			field:  "LongUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateShortUrlRequestMultiError(errors)
	}

	return nil
}

// CreateShortUrlRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShortUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortUrlRequestMultiError) AllErrors() []error { return m }

// CreateShortUrlRequestValidationError is the validation error returned by
// CreateShortUrlRequest.Validate if the designated constraints aren't met.
type CreateShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortUrlRequestValidationError) ErrorName() string {
	return "CreateShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortUrlRequestValidationError{}

// Validate checks the field values on CreateShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortUrlReplyMultiError, or nil if none found.
func (m *CreateShortUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return CreateShortUrlReplyMultiError(errors)
	}

	return nil
}

// CreateShortUrlReplyMultiError is an error wrapping multiple validation
// errors returned by CreateShortUrlReply.ValidateAll() if the designated
// constraints aren't met.
type CreateShortUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortUrlReplyMultiError) AllErrors() []error { return m }

// CreateShortUrlReplyValidationError is the validation error returned by
// CreateShortUrlReply.Validate if the designated constraints aren't met.
type CreateShortUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortUrlReplyValidationError) ErrorName() string {
	return "CreateShortUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortUrlReplyValidationError{}

// Validate checks the field values on UpdateShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShortUrlRequestMultiError, or nil if none found.
func (m *UpdateShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShortUrlRequestMultiError(errors)
	}

	return nil
}

// UpdateShortUrlRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateShortUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShortUrlRequestMultiError) AllErrors() []error { return m }

// UpdateShortUrlRequestValidationError is the validation error returned by
// UpdateShortUrlRequest.Validate if the designated constraints aren't met.
type UpdateShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShortUrlRequestValidationError) ErrorName() string {
	return "UpdateShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShortUrlRequestValidationError{}

// Validate checks the field values on UpdateShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShortUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateShortUrlReplyMultiError, or nil if none found.
func (m *UpdateShortUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShortUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateShortUrlReplyMultiError(errors)
	}

	return nil
}

// UpdateShortUrlReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateShortUrlReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateShortUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShortUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShortUrlReplyMultiError) AllErrors() []error { return m }

// UpdateShortUrlReplyValidationError is the validation error returned by
// UpdateShortUrlReply.Validate if the designated constraints aren't met.
type UpdateShortUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShortUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShortUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShortUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShortUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShortUrlReplyValidationError) ErrorName() string {
	return "UpdateShortUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShortUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShortUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShortUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShortUrlReplyValidationError{}

// Validate checks the field values on DeleteShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShortUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShortUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShortUrlRequestMultiError, or nil if none found.
func (m *DeleteShortUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShortUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShortUrlRequestMultiError(errors)
	}

	return nil
}

// DeleteShortUrlRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteShortUrlRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteShortUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShortUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShortUrlRequestMultiError) AllErrors() []error { return m }

// DeleteShortUrlRequestValidationError is the validation error returned by
// DeleteShortUrlRequest.Validate if the designated constraints aren't met.
type DeleteShortUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShortUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShortUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShortUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShortUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShortUrlRequestValidationError) ErrorName() string {
	return "DeleteShortUrlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShortUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShortUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShortUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShortUrlRequestValidationError{}

// Validate checks the field values on DeleteShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShortUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShortUrlReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShortUrlReplyMultiError, or nil if none found.
func (m *DeleteShortUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShortUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShortUrlReplyMultiError(errors)
	}

	return nil
}

// DeleteShortUrlReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteShortUrlReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteShortUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShortUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShortUrlReplyMultiError) AllErrors() []error { return m }

// DeleteShortUrlReplyValidationError is the validation error returned by
// DeleteShortUrlReply.Validate if the designated constraints aren't met.
type DeleteShortUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShortUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShortUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShortUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShortUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShortUrlReplyValidationError) ErrorName() string {
	return "DeleteShortUrlReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShortUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShortUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShortUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShortUrlReplyValidationError{}

// Validate checks the field values on GetUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlRequestMultiError, or
// nil if none found.
func (m *GetUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShortUrl()) < 1 {
		err := GetUrlRequestValidationError{
			field:  "ShortUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUrlRequestMultiError(errors)
	}

	return nil
}

// GetUrlRequestMultiError is an error wrapping multiple validation errors
// returned by GetUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlRequestMultiError) AllErrors() []error { return m }

// GetUrlRequestValidationError is the validation error returned by
// GetUrlRequest.Validate if the designated constraints aren't met.
type GetUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlRequestValidationError) ErrorName() string { return "GetUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlRequestValidationError{}

// Validate checks the field values on GetUrlReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUrlReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUrlReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUrlReplyMultiError, or
// nil if none found.
func (m *GetUrlReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUrlReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LongUrl

	if len(errors) > 0 {
		return GetUrlReplyMultiError(errors)
	}

	return nil
}

// GetUrlReplyMultiError is an error wrapping multiple validation errors
// returned by GetUrlReply.ValidateAll() if the designated constraints aren't met.
type GetUrlReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUrlReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUrlReplyMultiError) AllErrors() []error { return m }

// GetUrlReplyValidationError is the validation error returned by
// GetUrlReply.Validate if the designated constraints aren't met.
type GetUrlReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUrlReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUrlReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUrlReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUrlReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUrlReplyValidationError) ErrorName() string { return "GetUrlReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUrlReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUrlReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUrlReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUrlReplyValidationError{}
