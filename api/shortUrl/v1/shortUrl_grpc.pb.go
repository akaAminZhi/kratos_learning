// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: shortUrl/v1/shortUrl.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortUrl_CreateShortUrl_FullMethodName = "/api.shortUrl.v1.ShortUrl/CreateShortUrl"
	ShortUrl_UpdateShortUrl_FullMethodName = "/api.shortUrl.v1.ShortUrl/UpdateShortUrl"
	ShortUrl_DeleteShortUrl_FullMethodName = "/api.shortUrl.v1.ShortUrl/DeleteShortUrl"
	ShortUrl_GetUrl_FullMethodName         = "/api.shortUrl.v1.ShortUrl/GetUrl"
)

// ShortUrlClient is the client API for ShortUrl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortUrlClient interface {
	CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlReply, error)
	UpdateShortUrl(ctx context.Context, in *UpdateShortUrlRequest, opts ...grpc.CallOption) (*UpdateShortUrlReply, error)
	DeleteShortUrl(ctx context.Context, in *DeleteShortUrlRequest, opts ...grpc.CallOption) (*DeleteShortUrlReply, error)
	GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlReply, error)
}

type shortUrlClient struct {
	cc grpc.ClientConnInterface
}

func NewShortUrlClient(cc grpc.ClientConnInterface) ShortUrlClient {
	return &shortUrlClient{cc}
}

func (c *shortUrlClient) CreateShortUrl(ctx context.Context, in *CreateShortUrlRequest, opts ...grpc.CallOption) (*CreateShortUrlReply, error) {
	out := new(CreateShortUrlReply)
	err := c.cc.Invoke(ctx, ShortUrl_CreateShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) UpdateShortUrl(ctx context.Context, in *UpdateShortUrlRequest, opts ...grpc.CallOption) (*UpdateShortUrlReply, error) {
	out := new(UpdateShortUrlReply)
	err := c.cc.Invoke(ctx, ShortUrl_UpdateShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) DeleteShortUrl(ctx context.Context, in *DeleteShortUrlRequest, opts ...grpc.CallOption) (*DeleteShortUrlReply, error) {
	out := new(DeleteShortUrlReply)
	err := c.cc.Invoke(ctx, ShortUrl_DeleteShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortUrlClient) GetUrl(ctx context.Context, in *GetUrlRequest, opts ...grpc.CallOption) (*GetUrlReply, error) {
	out := new(GetUrlReply)
	err := c.cc.Invoke(ctx, ShortUrl_GetUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortUrlServer is the server API for ShortUrl service.
// All implementations must embed UnimplementedShortUrlServer
// for forward compatibility
type ShortUrlServer interface {
	CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlReply, error)
	UpdateShortUrl(context.Context, *UpdateShortUrlRequest) (*UpdateShortUrlReply, error)
	DeleteShortUrl(context.Context, *DeleteShortUrlRequest) (*DeleteShortUrlReply, error)
	GetUrl(context.Context, *GetUrlRequest) (*GetUrlReply, error)
	mustEmbedUnimplementedShortUrlServer()
}

// UnimplementedShortUrlServer must be embedded to have forward compatible implementations.
type UnimplementedShortUrlServer struct {
}

func (UnimplementedShortUrlServer) CreateShortUrl(context.Context, *CreateShortUrlRequest) (*CreateShortUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedShortUrlServer) UpdateShortUrl(context.Context, *UpdateShortUrlRequest) (*UpdateShortUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShortUrl not implemented")
}
func (UnimplementedShortUrlServer) DeleteShortUrl(context.Context, *DeleteShortUrlRequest) (*DeleteShortUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortUrl not implemented")
}
func (UnimplementedShortUrlServer) GetUrl(context.Context, *GetUrlRequest) (*GetUrlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUrl not implemented")
}
func (UnimplementedShortUrlServer) mustEmbedUnimplementedShortUrlServer() {}

// UnsafeShortUrlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortUrlServer will
// result in compilation errors.
type UnsafeShortUrlServer interface {
	mustEmbedUnimplementedShortUrlServer()
}

func RegisterShortUrlServer(s grpc.ServiceRegistrar, srv ShortUrlServer) {
	s.RegisterService(&ShortUrl_ServiceDesc, srv)
}

func _ShortUrl_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_CreateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).CreateShortUrl(ctx, req.(*CreateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_UpdateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).UpdateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_UpdateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).UpdateShortUrl(ctx, req.(*UpdateShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_DeleteShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).DeleteShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_DeleteShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).DeleteShortUrl(ctx, req.(*DeleteShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortUrl_GetUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortUrlServer).GetUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortUrl_GetUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortUrlServer).GetUrl(ctx, req.(*GetUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortUrl_ServiceDesc is the grpc.ServiceDesc for ShortUrl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortUrl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shortUrl.v1.ShortUrl",
	HandlerType: (*ShortUrlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _ShortUrl_CreateShortUrl_Handler,
		},
		{
			MethodName: "UpdateShortUrl",
			Handler:    _ShortUrl_UpdateShortUrl_Handler,
		},
		{
			MethodName: "DeleteShortUrl",
			Handler:    _ShortUrl_DeleteShortUrl_Handler,
		},
		{
			MethodName: "GetUrl",
			Handler:    _ShortUrl_GetUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortUrl/v1/shortUrl.proto",
}
